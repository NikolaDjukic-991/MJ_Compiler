
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 23 14:41:06 CEST 2016
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.WhileStruct.CondEval;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 23 14:41:06 CEST 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\071\002\000\002\072" +
    "\002\000\002\002\012\000\002\047\003\000\002\073\002" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\002\000\002\016\005\000\002\037\004\000\002" +
    "\036\005\000\002\036\002\000\002\017\004\000\002\017" +
    "\003\000\002\006\004\000\002\006\002\000\002\020\006" +
    "\000\002\021\004\000\002\022\005\000\002\022\002\000" +
    "\002\023\005\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\074\002\000\002\075" +
    "\002\000\002\076\002\000\002\077\002\000\002\004\017" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\051\003\000\002\014\004\000\002\014\002\000\002" +
    "\100\002\000\002\015\014\000\002\045\004\000\002\045" +
    "\002\000\002\101\002\000\002\102\002\000\002\046\015" +
    "\000\002\040\007\000\002\040\002\000\002\041\005\000" +
    "\002\041\002\000\002\061\003\000\002\061\003\000\002" +
    "\024\003\000\002\024\002\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\025\003\000\002\026\005" +
    "\000\002\010\004\000\002\010\002\000\002\007\003\000" +
    "\002\007\003\000\002\043\007\000\002\043\011\000\002" +
    "\043\007\000\002\103\002\000\002\042\006\000\002\042" +
    "\005\000\002\042\011\000\002\042\007\000\002\042\004" +
    "\000\002\042\004\000\002\042\005\000\002\042\007\000" +
    "\002\042\010\000\002\042\005\000\002\062\004\000\002" +
    "\062\002\000\002\013\003\000\002\055\004\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\032\003" +
    "\000\002\030\003\000\002\030\005\000\002\030\003\000" +
    "\002\033\003\000\002\031\003\000\002\031\005\000\002" +
    "\034\003\000\002\070\003\000\002\070\005\000\002\104" +
    "\002\000\002\052\006\000\002\052\004\000\002\060\004" +
    "\000\002\060\005\000\002\066\003\000\002\066\002\000" +
    "\002\064\003\000\002\064\003\000\002\053\003\000\002" +
    "\053\004\000\002\056\004\000\002\056\005\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\054\004" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\004\000\002\054\007\000\002" +
    "\054\007\000\002\054\005\000\002\054\005\000\002\105" +
    "\002\000\002\050\005\000\002\011\005\000\002\011\002" +
    "\000\002\057\005\000\002\106\002\000\002\057\007\000" +
    "\002\057\006\000\002\057\002\000\002\027\004\000\002" +
    "\035\005\000\002\035\002\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\004\005\001\002\000\004\002\342\001" +
    "\002\000\004\045\006\001\002\000\012\005\ufffd\016\ufffd" +
    "\017\ufffd\045\ufffd\001\002\000\012\005\ufff8\016\ufff8\017" +
    "\ufff8\045\ufff8\001\002\000\012\005\016\016\011\017\015" +
    "\045\ufffc\001\002\000\004\045\025\001\002\000\004\045" +
    "\025\001\002\000\012\005\ufffa\016\ufffa\017\ufffa\045\ufffa" +
    "\001\002\000\012\005\ufff9\016\ufff9\017\ufff9\045\ufff9\001" +
    "\002\000\004\045\264\001\002\000\010\006\000\032\000" +
    "\045\000\001\002\000\010\006\uffd8\032\uffd8\045\uffd8\001" +
    "\002\000\010\006\uffff\032\026\045\025\001\002\000\010" +
    "\006\uffd9\032\uffd9\045\uffd9\001\002\000\004\045\uffcf\001" +
    "\002\000\004\006\263\001\002\000\004\045\027\001\002" +
    "\000\054\003\uffde\005\uffde\007\uffde\011\uffde\012\uffde\013" +
    "\uffde\015\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\043\uffde\044\uffde\045\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\001\002\000\004\045\uffd0\001\002" +
    "\000\004\010\uffd7\001\002\000\004\010\031\001\002\000" +
    "\010\003\034\011\uffcd\045\025\001\002\000\006\011\uffca" +
    "\015\uffca\001\002\000\004\045\261\001\002\000\006\011" +
    "\uffc9\015\uffc9\001\002\000\004\011\042\001\002\000\006" +
    "\011\uffce\015\037\001\002\000\006\003\041\045\025\001" +
    "\002\000\006\011\uffcc\015\uffcc\001\002\000\006\011\uffcb" +
    "\015\uffcb\001\002\000\006\005\uffd3\045\uffd3\001\002\000" +
    "\006\005\uffd6\045\025\001\002\000\006\003\uffd1\045\uffd1" +
    "\001\002\000\004\005\046\001\002\000\024\005\uffc6\006" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\026\uffc6\030\uffc6\031\uffc6" +
    "\045\uffc6\001\002\000\024\005\057\006\056\020\064\021" +
    "\062\022\050\026\060\030\051\031\065\045\052\001\002" +
    "\000\004\010\244\001\002\000\004\010\uffb3\001\002\000" +
    "\062\003\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a" +
    "\014\uff8a\015\uff8a\023\uff8a\033\uff8a\034\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\001\002\000" +
    "\004\010\224\001\002\000\024\005\uffc4\006\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\026\uffc4\030\uffc4\031\uffc4\045\uffc4\001" +
    "\002\000\016\003\uffc0\007\uff87\010\130\014\uffc0\041\uffc0" +
    "\042\uffc0\001\002\000\010\006\uffd5\032\uffd5\045\uffd5\001" +
    "\002\000\024\005\uffc6\006\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\026\uffc6\030\uffc6\031\uffc6\045\uffc6\001\002\000\004\010" +
    "\156\001\002\000\024\005\uffc7\006\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\026\uffc7\030\uffc7\031\uffc7\045\uffc7\001\002\000" +
    "\004\010\147\001\002\000\024\005\uffc5\006\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\026\uffc5\030\uffc5\031\uffc5\045\uffc5\001" +
    "\002\000\024\007\072\010\uff9e\024\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\053\067\001\002\000\004\007" +
    "\066\001\002\000\026\005\uffbb\006\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\045\uffbb\001" +
    "\002\000\020\010\uff9f\024\uff9f\045\uff9f\046\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\001\002\000\004\007\146\001\002\000" +
    "\020\010\102\024\075\045\052\046\073\047\103\050\074" +
    "\051\077\001\002\000\026\005\uffba\006\uffba\020\uffba\021" +
    "\uffba\022\uffba\026\uffba\027\uffba\030\uffba\031\uffba\045\uffba" +
    "\001\002\000\044\007\uff93\011\uff93\013\uff93\015\uff93\033" +
    "\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\043\uff93" +
    "\044\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\001" +
    "\002\000\044\007\uff91\011\uff91\013\uff91\015\uff91\033\uff91" +
    "\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\043\uff91\044" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\001\002" +
    "\000\004\045\025\001\002\000\046\007\uff87\010\130\011" +
    "\uff87\013\uff87\015\uff87\033\uff87\034\uff87\035\uff87\036\uff87" +
    "\037\uff87\040\uff87\043\uff87\044\uff87\052\uff87\053\uff87\054" +
    "\uff87\055\uff87\056\uff87\001\002\000\044\007\uff90\011\uff90" +
    "\013\uff90\015\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037" +
    "\uff90\040\uff90\043\uff90\044\uff90\052\uff90\053\uff90\054\uff90" +
    "\055\uff90\056\uff90\001\002\000\036\007\uffa2\011\uffa2\013" +
    "\uffa2\015\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\043\uffa2\044\uffa2\052\uffa4\053\uffa4\001\002\000" +
    "\044\007\uff9b\011\uff9b\013\uff9b\015\uff9b\033\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\040\uff9b\043\uff9b\044\uff9b\052" +
    "\uff9b\053\uff9b\054\112\055\113\056\110\001\002\000\024" +
    "\003\104\010\uff9e\024\uff9e\045\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\053\067\001\002\000\044\007\uff92\011\uff92" +
    "\013\uff92\015\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\043\uff92\044\uff92\052\uff92\053\uff92\054\uff92" +
    "\055\uff92\056\uff92\001\002\000\004\011\107\001\002\000" +
    "\004\011\106\001\002\000\044\007\uff8c\011\uff8c\013\uff8c" +
    "\015\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\043\uff8c\044\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\001\002\000\044\007\uff8b\011\uff8b\013\uff8b\015" +
    "\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\043\uff8b\044\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056" +
    "\uff8b\001\002\000\020\010\uff95\024\uff95\045\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\001\002\000\044\007\uff9a\011" +
    "\uff9a\013\uff9a\015\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\043\uff9a\044\uff9a\052\uff9a\053\uff9a\054" +
    "\112\055\113\056\110\001\002\000\020\010\uff97\024\uff97" +
    "\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\001\002\000" +
    "\020\010\uff96\024\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\001\002\000\020\010\102\024\075\045\052\046" +
    "\073\047\103\050\074\051\077\001\002\000\044\007\uff99" +
    "\011\uff99\013\uff99\015\uff99\033\uff99\034\uff99\035\uff99\036" +
    "\uff99\037\uff99\040\uff99\043\uff99\044\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\001\002\000\020\010\102\024" +
    "\075\045\052\046\073\047\103\050\074\051\077\001\002" +
    "\000\044\007\uff98\011\uff98\013\uff98\015\uff98\033\uff98\034" +
    "\uff98\035\uff98\036\uff98\037\uff98\040\uff98\043\uff98\044\uff98" +
    "\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98\001\002\000" +
    "\006\052\122\053\121\001\002\000\020\010\uff9c\024\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\001\002\000" +
    "\020\010\uff9d\024\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\001\002\000\036\007\uffa3\011\uffa3\013\uffa3\015" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\043\uffa3\044\uffa3\052\122\053\121\001\002\000\020\010" +
    "\102\024\075\045\052\046\073\047\103\050\074\051\077" +
    "\001\002\000\036\007\uffa1\011\uffa1\013\uffa1\015\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\043\uffa1" +
    "\044\uffa1\052\uffa1\053\uffa1\001\002\000\020\010\102\024" +
    "\075\045\052\046\073\047\103\050\074\051\077\001\002" +
    "\000\036\007\uffa0\011\uffa0\013\uffa0\015\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\043\uffa0\044\uffa0" +
    "\052\uffa0\053\uffa0\001\002\000\022\010\uff9e\024\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\053\067\001\002" +
    "\000\044\007\uff94\011\uff94\013\uff94\015\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\043\uff94\044\uff94" +
    "\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\001\002\000" +
    "\004\011\137\001\002\000\006\011\uff7f\015\uff7f\001\002" +
    "\000\006\011\uff81\015\135\001\002\000\022\010\uff9e\024" +
    "\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\053\067" +
    "\001\002\000\006\011\uff80\015\uff80\001\002\000\044\007" +
    "\uff88\011\uff88\013\uff88\015\uff88\033\uff88\034\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\043\uff88\044\uff88\052\uff88\053" +
    "\uff88\054\uff88\055\uff88\056\uff88\001\002\000\046\007\uff8f" +
    "\011\uff8f\012\141\013\uff8f\015\uff8f\033\uff8f\034\uff8f\035" +
    "\uff8f\036\uff8f\037\uff8f\040\uff8f\043\uff8f\044\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\055\uff8f\056\uff8f\001\002\000\024\003" +
    "\142\010\uff9e\024\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\053\067\001\002\000\004\013\145\001\002\000" +
    "\004\013\144\001\002\000\044\007\uff8e\011\uff8e\013\uff8e" +
    "\015\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\043\uff8e\044\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e" +
    "\056\uff8e\001\002\000\044\007\uff8d\011\uff8d\013\uff8d\015" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\043\uff8d\044\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056" +
    "\uff8d\001\002\000\026\005\uffb9\006\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\045\uffb9\001" +
    "\002\000\022\010\uff9e\024\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\053\067\001\002\000\006\011\uffb4\015" +
    "\151\001\002\000\004\046\155\001\002\000\004\011\153" +
    "\001\002\000\004\007\154\001\002\000\026\005\uffb7\006" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\045\uffb7\001\002\000\004\011\uffb5\001\002\000" +
    "\024\003\164\010\uff9e\024\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\053\067\001\002\000\024\011\uffa6\033" +
    "\206\034\204\035\201\036\200\037\202\040\203\043\uffa6" +
    "\044\uffa6\001\002\000\006\011\uffad\043\uffad\001\002\000" +
    "\010\011\uffa9\043\uffa9\044\uffa9\001\002\000\006\011\170" +
    "\043\171\001\002\000\010\011\uffa7\043\uffa7\044\uffa7\001" +
    "\002\000\006\011\uffab\043\uffab\001\002\000\010\011\uffaa" +
    "\043\uffaa\044\166\001\002\000\022\010\uff9e\024\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\053\067\001\002" +
    "\000\010\011\uffa8\043\uffa8\044\uffa8\001\002\000\022\005" +
    "\057\020\064\021\062\022\050\026\060\030\051\031\065" +
    "\045\052\001\002\000\022\010\uff9e\024\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\053\067\001\002\000\010" +
    "\011\uffac\043\uffac\044\166\001\002\000\024\005\uffc3\006" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\026\uffc3\030\uffc3\031\uffc3" +
    "\045\uffc3\001\002\000\026\005\uffc5\006\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\026\uffc5\027\175\030\uffc5\031\uffc5\045\uffc5" +
    "\001\002\000\022\005\057\020\064\021\062\022\050\026" +
    "\060\030\051\031\065\045\052\001\002\000\024\005\uffc2" +
    "\006\uffc2\020\uffc2\021\uffc2\022\uffc2\026\uffc2\030\uffc2\031" +
    "\uffc2\045\uffc2\001\002\000\026\005\uffbd\006\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\045" +
    "\uffbd\001\002\000\022\010\uff7b\024\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\050\uff7b\051\uff7b\053\uff7b\001\002\000\022\010" +
    "\uff7c\024\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051\uff7c" +
    "\053\uff7c\001\002\000\022\010\uff7a\024\uff7a\045\uff7a\046" +
    "\uff7a\047\uff7a\050\uff7a\051\uff7a\053\uff7a\001\002\000\022" +
    "\010\uff79\024\uff79\045\uff79\046\uff79\047\uff79\050\uff79\051" +
    "\uff79\053\uff79\001\002\000\022\010\uff7d\024\uff7d\045\uff7d" +
    "\046\uff7d\047\uff7d\050\uff7d\051\uff7d\053\uff7d\001\002\000" +
    "\022\010\uff9e\024\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\053\067\001\002\000\022\010\uff7e\024\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\053\uff7e\001\002" +
    "\000\010\011\uffa5\043\uffa5\044\uffa5\001\002\000\024\005" +
    "\057\006\211\020\064\021\062\022\050\026\060\030\051" +
    "\031\065\045\052\001\002\000\026\005\uffb6\006\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\045\uffb6\001\002\000\012\003\217\014\215\041\216\042" +
    "\221\001\002\000\004\007\214\001\002\000\026\005\uffbe" +
    "\006\uffbe\020\uffbe\021\uffbe\022\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\045\uffbe\001\002\000\022\010\uff9e\024\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\053\067\001" +
    "\002\000\004\007\uffb0\001\002\000\004\007\uffb1\001\002" +
    "\000\004\007\222\001\002\000\004\007\uffaf\001\002\000" +
    "\026\005\uffbf\006\uffbf\020\uffbf\021\uffbf\022\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\045\uffbf\001\002\000\004\007" +
    "\uffb2\001\002\000\024\003\164\010\uff9e\024\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\053\067\001\002\000" +
    "\006\011\uffae\043\171\001\002\000\004\011\227\001\002" +
    "\000\022\005\057\020\064\021\062\022\050\026\060\030" +
    "\051\031\065\045\052\001\002\000\024\005\uffc1\006\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\026\uffc1\030\uffc1\031\uffc1\045" +
    "\uffc1\001\002\000\026\005\uffbc\006\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\045\uffbc\001" +
    "\002\000\062\003\uff82\007\uff82\010\uff82\011\uff82\012\uff82" +
    "\013\uff82\014\uff82\015\uff82\023\uff82\033\uff82\034\uff82\035" +
    "\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82" +
    "\044\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82\001" +
    "\002\000\062\003\uff89\007\uff89\010\uff89\011\uff89\012\234" +
    "\013\uff89\014\uff89\015\uff89\023\235\033\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\044\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056\uff89\001" +
    "\002\000\024\003\237\010\uff85\024\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\053\uff85\001\002\000\004\045" +
    "\236\001\002\000\062\003\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\013\uff86\014\uff86\015\uff86\023\uff86\033\uff86\034" +
    "\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056" +
    "\uff86\001\002\000\004\013\243\001\002\000\022\010\uff9e" +
    "\024\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\053" +
    "\067\001\002\000\004\013\242\001\002\000\062\003\uff84" +
    "\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015" +
    "\uff84\023\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\052\uff84\053" +
    "\uff84\054\uff84\055\uff84\056\uff84\001\002\000\062\003\uff83" +
    "\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015" +
    "\uff83\023\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83" +
    "\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\052\uff83\053" +
    "\uff83\054\uff83\055\uff83\056\uff83\001\002\000\004\045\052" +
    "\001\002\000\004\011\246\001\002\000\004\007\247\001" +
    "\002\000\026\005\uffb8\006\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\045\uffb8\001\002\000" +
    "\006\003\251\045\253\001\002\000\006\007\ufff2\015\ufff2" +
    "\001\002\000\006\007\260\015\257\001\002\000\010\007" +
    "\ufff0\012\254\015\ufff0\001\002\000\004\013\256\001\002" +
    "\000\006\007\ufff3\015\ufff3\001\002\000\010\007\ufff1\011" +
    "\ufff1\015\ufff1\001\002\000\006\003\uffd2\045\uffd2\001\002" +
    "\000\006\005\uffd4\045\uffd4\001\002\000\010\011\ufff0\012" +
    "\254\015\ufff0\001\002\000\006\011\uffc8\015\uffc8\001\002" +
    "\000\004\002\ufffe\001\002\000\006\005\uffe6\025\uffe6\001" +
    "\002\000\006\005\uffdf\025\266\001\002\000\006\003\323" +
    "\045\025\001\002\000\004\005\270\001\002\000\004\045" +
    "\uffe5\001\002\000\004\045\025\001\002\000\006\003\ufff4" +
    "\045\ufff4\001\002\000\004\005\uffe4\001\002\000\004\005" +
    "\275\001\002\000\010\006\uffe3\032\uffe3\045\uffe3\001\002" +
    "\000\010\006\uffdc\032\uffdc\045\uffdc\001\002\000\010\006" +
    "\302\032\026\045\025\001\002\000\004\045\304\001\002" +
    "\000\010\006\uffdd\032\uffdd\045\uffdd\001\002\000\004\006" +
    "\303\001\002\000\012\005\uffe2\016\uffe2\017\uffe2\045\uffe2" +
    "\001\002\000\004\010\305\001\002\000\010\003\034\011" +
    "\uffcd\045\025\001\002\000\004\011\307\001\002\000\006" +
    "\005\uffd3\045\uffd3\001\002\000\006\005\uffdb\045\025\001" +
    "\002\000\004\005\312\001\002\000\024\005\uffc6\006\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\026\uffc6\030\uffc6\031\uffc6\045" +
    "\uffc6\001\002\000\024\005\057\006\314\020\064\021\062" +
    "\022\050\026\060\030\051\031\065\045\052\001\002\000" +
    "\010\006\uffda\032\uffda\045\uffda\001\002\000\006\003\251" +
    "\045\253\001\002\000\004\007\317\001\002\000\012\005" +
    "\ufff7\016\ufff7\017\ufff7\045\ufff7\001\002\000\006\007\ufff6" +
    "\015\321\001\002\000\006\003\ufff5\045\ufff5\001\002\000" +
    "\004\005\uffe1\001\002\000\004\005\uffe0\001\002\000\012" +
    "\005\ufffb\016\ufffb\017\ufffb\045\ufffb\001\002\000\004\045" +
    "\uffec\001\002\000\004\007\341\001\002\000\004\045\331" +
    "\001\002\000\006\007\uffee\015\340\001\002\000\004\014" +
    "\332\001\002\000\012\046\333\047\337\050\336\051\335" +
    "\001\002\000\006\007\uffea\015\uffea\001\002\000\006\007" +
    "\uffeb\015\uffeb\001\002\000\006\007\uffe7\015\uffe7\001\002" +
    "\000\006\007\uffe8\015\uffe8\001\002\000\006\007\uffe9\015" +
    "\uffe9\001\002\000\004\045\uffed\001\002\000\012\005\uffef" +
    "\016\uffef\017\uffef\045\uffef\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\047\006\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\010\004\013\020\012\073\011\001\001\000" +
    "\004\051\324\001\001\000\006\016\323\051\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\016\001\001\000\004\045\017\001\001\000\012" +
    "\046\020\051\021\061\023\072\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\027\001" +
    "\001\000\002\001\001\000\012\024\034\025\035\026\031" +
    "\051\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\037\051\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\042\001\001\000\006\051\043\102\044" +
    "\001\001\000\004\041\247\001\001\000\002\001\001\000" +
    "\004\010\046\001\001\000\014\007\060\013\052\042\062" +
    "\043\053\050\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\105\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\212\103\211\001\001\000\002\001" +
    "\001\000\004\010\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\067\066\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\075\053" +
    "\077\054\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\137\001\001\000\004\011" +
    "\130\001\001\000\002\001\001\000\004\104\117\001\001" +
    "\000\006\056\110\065\113\001\001\000\006\052\104\066" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\075\054\114\001\001\000\002\001" +
    "\001\000\006\050\075\054\116\001\001\000\002\001\001" +
    "\000\006\060\122\064\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\125\001\001\000\010\050\075" +
    "\053\124\054\100\001\001\000\002\001\001\000\010\050" +
    "\075\053\126\054\100\001\001\000\002\001\001\000\010" +
    "\027\131\052\132\066\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\133\001\001\000\002\001\001" +
    "\000\006\052\135\066\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\052\142\066\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\052\147" +
    "\066\070\001\001\000\004\062\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\030\161\031\164\033\157\034" +
    "\160\052\156\066\070\070\162\001\001\000\004\067\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\034\166\052\156\066\070\070\162\001\001\000" +
    "\002\001\001\000\014\007\172\013\052\042\173\043\053" +
    "\050\054\001\001\000\014\031\171\034\160\052\156\066" +
    "\070\070\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\052\042\176\043\175\050" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\206\066\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\060\013" +
    "\052\042\062\043\053\050\054\001\001\000\002\001\001" +
    "\000\004\055\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\052\222\066\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\030\224\031\164" +
    "\032\225\033\157\034\160\052\156\066\070\070\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\052" +
    "\042\230\043\227\050\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\232\001\001\000\002\001\001" +
    "\000\004\106\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\240\066\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\264\001\001\000" +
    "\004\005\266\001\001\000\004\051\321\001\001\000\002" +
    "\001\001\000\004\075\270\001\001\000\006\016\272\051" +
    "\271\001\001\000\006\036\314\037\315\001\001\000\004" +
    "\076\273\001\001\000\002\001\001\000\004\077\275\001" +
    "\001\000\004\014\276\001\001\000\010\015\300\051\021" +
    "\061\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\305\025\035\026\031\051\032\001\001\000\002\001" +
    "\001\000\004\040\307\001\001\000\006\051\043\100\310" +
    "\001\001\000\002\001\001\000\004\010\312\001\001\000" +
    "\014\007\060\013\052\042\062\043\053\050\054\001\001" +
    "\000\002\001\001\000\004\017\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\325\022\326\001\001\000\002\001\001\000\004" +
    "\023\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope
	Struct stringStruct = new Struct(Struct.Array);
	stringStruct.setElementType(Tab.find("char").getType());
	Tab.insert(Obj.Type, "String", stringStruct);
	
	Struct boolStruct = new Struct(Struct.Bool);
	Tab.insert(Obj.Type, "boolean", boolStruct);
	

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if ( s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	boolean error = false;

	public enum VarCountMode {
		GLOBAL, CLASS, MAIN, NONE
	}
	
	public enum VarCountType {
		VAR, ARRAY
	}
	
	public enum MethodCountMode{
		CLASS, GLOBAL, NONE
	}

	int globalVarCount = 0;
	int globalArrayCount = 0;
	int printCallCount = 0;
	int constCount = 0;
	int mainVarCount = 0;
	int classVarCount = 0;
	int classCount = 0;
	int statementBlockCount = 0;
	int formParsCount = 0;
	
	int globalMethodCount = 0;
	int classMethodCount = 0;
	
	int asstype = 0;
	boolean allocArray = false;
	boolean arrayAccess = false;
	boolean arrayStore = false;
	boolean jumpjump = false;
	
	VarCountMode varmode = VarCountMode.NONE;
	
	MethodCountMode methodmode = MethodCountMode.NONE;
	
	
	Logger log = Logger.getLogger(getClass());
	
	public void switchVarMode(VarCountMode c){
		this.varmode = c;
	}
	
	public void switchMethodMode(MethodCountMode c){
		this.methodmode = c;
	}
	
	public void incrementCount(VarCountType t) { 
		if(this.varmode == VarCountMode.GLOBAL){
			if(t == VarCountType.VAR)
				globalVarCount++;
			if(t == VarCountType.ARRAY)
				globalArrayCount++;
			
		}
		if(this.varmode == VarCountMode.MAIN)  mainVarCount++;
		if(this.varmode == VarCountMode.CLASS) classVarCount++;
	}
	
	public void incrementMethodCount(){
		if(this.methodmode == MethodCountMode.GLOBAL)
			globalMethodCount++;
		if(this.methodmode == MethodCountMode.CLASS)
			classMethodCount++;
		
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token) {
		error = true;
		report_error("\nSyntax error", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		error = true;
		report_fatal_error("Fatal error, can not continue parsing", cur_token);
	}

	public void report_error(String message, Object info) {
		error = true;
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
			msg.append(" at line ").append(((Symbol)info).left).append(" : ").append(((Symbol)info).right);
		log.error(msg.toString());
		
	}
	
		public void report_info(String message, Object info) {
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
			msg.append(" at line ").append(((Symbol)info).left).append(" : ").append(((Symbol)info).right);
		log.info(msg.toString());
		
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	boolean hasReturn = false;
	Struct curType = null;
	boolean isArray = false;
	boolean mainFound = false;
	int fpPos = 0;
	Struct actRet = Tab.noObj.getType();
	int loopNest = 0;
	Obj currentMethod = null;
	Obj last = null;
	boolean negated = false;

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Relop ::= LEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Relop ::= LE 
            {
              Integer RESULT =null;
		 RESULT = Code.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Relop ::= GTE 
            {
              Integer RESULT =null;
		 RESULT = Code.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Relop ::= GT 
            {
              Integer RESULT =null;
		 RESULT = Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Relop ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = Code.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= EQU 
            {
              Integer RESULT =null;
		 RESULT = Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ExprList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ExprList ::= ExprList COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ActPars ::= Expr ExprList 
            {
              Object RESULT =null;
		 // TODO Check num of params 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IdentList ::= 
            {
              Struct RESULT =null;
		  RESULT = last.getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IdentList ::= IdentList LEFT_SBRACKET error RIGHT_SBRACKET 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IdentList ::= IdentList LEFT_SBRACKET NT$13 Expr RIGHT_SBRACKET 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct ilist = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if( ilist.getKind() == Struct.Array && e.equals(Tab.intType)){
		
		last = new Obj(Obj.Var, "", ilist.getElemType());
		this.parser.arrayAccess = true;
		RESULT = ilist.getElemType(); 
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$13 ::= 
            {
              Struct RESULT =null;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct ilist = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 Code.load(last); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IdentList ::= IdentList DOT IDENT 
            {
              Struct RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String next = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

	last = last.getType().getMembersTable().searchKey(next);
	if(last == null){
		parser.report_error("No field named "+next+" at "+nextleft, null);
		last = Tab.noObj;
		RESULT = Tab.noObj.getType();
	} else {
		parser.report_info("Found field named "+last.getName()+" at " + nextleft,null);
		RESULT = last.getType();
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DesignatorModifiers ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorModifiers",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DesignatorModifiers ::= LEFT_BRACKET ActPars RIGHT_BRACKET 
            {
              Object RESULT =null;
		 // TODO check num of formparams vs actparams
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorModifiers",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Designator ::= IDENT NT$12 IdentList 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rootleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int rootright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String root = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tail = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
   //if(!last.getType().isRefType()) RESULT = last;
   //else RESULT = Tab.noObj;
   RESULT = Tab.find(root);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$12 ::= 
            {
              Obj RESULT =null;
		int rootleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rootright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String root = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

	Obj id = Tab.find(root);
    last = id;
    RESULT = id;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= LEFT_BRACKET error RIGHT_BRACKET 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= LEFT_BRACKET Expr RIGHT_BRACKET 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = e; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= NEW Type LEFT_SBRACKET error RIGHT_SBRACKET 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= NEW Type LEFT_SBRACKET Expr RIGHT_SBRACKET 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if(e.assignableTo(Tab.intType)){
		Struct tt = new Struct(Struct.Array, t.getType());
		this.parser.allocArray = true;
		RESULT = tt;		// TODO CHECK ARRAY ???
	}
	else RESULT = Tab.noObj.getType();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if(t.getType().getKind() == Struct.Class){
	parser.report_info("Object of type "+t.getName()+" allocated at "+tleft, null);
	RESULT = t.getType();
	} else {
		parser.report_error("Error "+t.getName()+" is not a class type at "+tleft, null);
		RESULT = Tab.noObj.getType();
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= STRING 
            {
              Struct RESULT =null;
		 RESULT = Tab.find("String").getType(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= BOOL 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		boolean b = (boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj c = Tab.insert(Obj.Con, "", Tab.find("boolean").getType());
	if(!b) c.setAdr(0);
	else c.setAdr(1);
	Code.load(c);
	RESULT = Tab.find("boolean").getType();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= CHAR 
            {
              Struct RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		char ch = (char)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj c = Tab.insert(Obj.Con, "", Tab.charType);
	c.setAdr(ch);
	Code.load(c);
	RESULT = Tab.charType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= NUM 
            {
              Struct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj c = Tab.insert(Obj.Con, "", Tab.intType);
	c.setAdr(i.intValue());
	Code.load(c);
	RESULT = Tab.intType;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= Designator DesignatorModifiers 
            {
              Struct RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if(this.parser.arrayAccess){
		if(des.getType().getKind() != Struct.Array){
			parser.report_error("Error "+des.getName()+" must be an array type at "+desleft, null);
		} else {
			Obj o = new Obj(Obj.Elem, "", des.getType().getElemType());
			Code.load(o);
			this.parser.arrayAccess = false;
			RESULT = des.getType().getElemType();
		}
	} else {
		Code.load(des);
		RESULT = des.getType();
	}
		// TODO check function params

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Mulop ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Mulop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Mulop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FactList ::= FactList Mulop Factor 
            {
              Struct RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct fl = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(f.compatibleWith(fl)){
			Code.put(op);
			RESULT = f;
		}
		else{
			parser.report_error("Incompatible types at " + fleft,null);
			RESULT = Tab.noType;
		} 
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FactList ::= Mulop Factor 
            {
              Struct RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		Code.put(op);
		RESULT = f;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Term ::= Factor FactList 
            {
              Struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int flistleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int flistright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct flist = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 if(f.compatibleWith(flist)) RESULT = f; else RESULT = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Term ::= Factor 
            {
              Struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct f = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = f; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Addop ::= SUB 
            {
              Integer RESULT =null;
		 RESULT = Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Addop ::= ADD 
            {
              Integer RESULT =null;
		 RESULT = Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Neg ::= 
            {
              Integer RESULT =null;
		 RESULT = null; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Neg",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Neg ::= SUB 
            {
              Integer RESULT =null;
		 negated = true; RESULT = Code.neg; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Neg",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExprList2 ::= ExprList2 Addop Term 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tt = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		if(e.compatibleWith(tt)){
			Code.put(op);
			RESULT = e;
		}
		else {
			parser.report_error("Incompatible types at "+ttleft, null);
			RESULT = Tab.noType;
		}
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList2",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExprList2 ::= Addop Term 
            {
              Struct RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		Code.put(op);
		RESULT = t;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprList2",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Neg Term 
            {
              Struct RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer neg = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	negated = false;
	if(neg != null){
		Code.put(neg);
	}
	RESULT = t;// TODO check if Term = int

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Neg Term NT$11 ExprList2 
            {
              Struct RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Struct) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int negleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer neg = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct list = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	boolean error = false;
	if(negated){
		negated = false;
		if(t.getKind() != Struct.Int){
			parser.report_error("Negating non int type at "+ tleft, null);
			error = true;
		}
	}
	if(t.assignableTo(list) && !error){ // TODO check if compatible types
			parser.report_info("Correct expression at "+tleft,null);
			RESULT = t;
	} else {
		parser.report_error("Incorrect expression at "+tleft,null);
		RESULT = Tab.noObj.getType();
	}
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$11 ::= 
            {
              Struct RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer neg = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 if(neg != null) Code.put(neg); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondFact ::= Expr Relop Expr 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct e1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(!e1.compatibleWith(e2)){
					this.parser.report_error("Error condition expression not compatible at " + e1left, null);
					RESULT = 0;
				} else {
					RESULT = op;
				}
				// TODO check if compatible. if class or arr only != and ==
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondFact ::= Expr 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(!Tab.find("boolean").getType().equals(e)){
					this.parser.report_error("Error expression inside a condition must be a boolean type at " + eleft, null);
				}
				Obj c = new Obj(Obj.Con, "",Tab.intType);
				c.setAdr(1);
				Code.load(c);
				
				RESULT = Code.eq;
				
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondFactEval ::= CondFact 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	WhileStruct.getCurrentTop().addCondition(Code.pc);
	Code.putFalseJump(op, 0);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactEval",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondTerm ::= CondTerm AND CondFactEval 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondTerm ::= CondFactEval 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTermEval ::= CondTerm 
            {
              Object RESULT =null;
		
		WhileStruct.getCurrentTop().addCodeJump(Code.pc);
		Code.putJump(0); // all conditions that were "AND" delimited passed, jump into a code block
		CondEval ce = WhileStruct.getCurrentTop().getConds(); // after this point the next condition should execute or the jump to exit the loop (THIS IS WHERE WE WANT TO JUMP)
		while(ce != null){
			Code.fixup(ce.getAdr()+1);
			ce = ce.next;
		}
		WhileStruct.getCurrentTop().wipeConds();
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermEval",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Condition ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;
		
	
		WhileStruct.getCurrentTop().addCodeJump(Code.pc);
		Code.putJump(0);
		
		CondEval ce = WhileStruct.getCurrentTop().getConds(); // Jump to the jump out instruction
		while(ce != null){
			Code.fixup(ce.getAdr()+1);
			ce = ce.next;
		}
		WhileStruct.getCurrentTop().wipeConds();
	
		
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Condition ::= CondTermEval 
            {
              Object RESULT =null;
		
		

		


	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CondEvaluated ::= Condition 
            {
              Object RESULT =null;
		
		WhileStruct.setEndJumpInstrAdr(Code.pc);
		Code.putJump(99);
		
		CondEval jmps = WhileStruct.getCurrentTop().getJumps();
		while(jmps != null){
			Code.fixup(jmps.getAdr()+1);
			jmps = jmps.next;
		}
		
		

	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondEvaluated",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Assign ::= MM 
            {
              Struct RESULT =null;
		
				this.parser.asstype = 2;
				RESULT = Tab.intType;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assign",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Assign ::= PP 
            {
              Struct RESULT =null;
		
				this.parser.asstype = 1;
				RESULT = Tab.intType;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assign",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Assign ::= error 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assign",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Assign ::= ASSIGNMENT Expr 
            {
              Struct RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 this.parser.asstype = 0; RESULT = e; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assign",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // While ::= WHILE 
            {
              Object RESULT =null;
		
		loopNest++;
		WhileStruct.enterWhile(Code.pc);
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("While",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PrintWidth ::= 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintWidth",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PrintWidth ::= COMMA NUM 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = n; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PrintWidth",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Matched ::= LEFT_CBRACKET StatementList RIGHT_CBRACKET 
            {
              Object RESULT =null;
		 this.parser.statementBlockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Matched ::= PRINT LEFT_BRACKET Expr PrintWidth RIGHT_BRACKET SEMIC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				// TODO make sure it's int/char/bool/str 
				this.parser.printCallCount++;
				if(e.isRefType()){
					parser.report_error("Write argument must be int/char/bool/String at " + eleft,null);
				} else {
					if(e.getKind() != 0){
						parser.report_info("Correct argument for write at " + eleft,null);
						if (e != Tab.charType){
							Code.loadConst(w);
							Code.put(Code.print);
						}
						if(e == Tab.charType){
							Code.loadConst(1);
							Code.put(Code.bprint);
						}
					}
					else parser.report_error("Write argument must be int/char at " + eleft,null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= READ LEFT_BRACKET Designator RIGHT_BRACKET SEMIC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(d.getType() != Tab.intType &&
				d.getType() != Tab.charType &&
				d.getType() != Tab.find("boolean").getType() && // TODO IMPLEMENT BOOLTYPE 
				d.getType() != Tab.find("String").getType()){
					parser.report_error("Read argument must be int/char/bool/String at " + dleft,null);
				} else {
					Code.load(d);
					if(d.getType() != Tab.charType){
						Code.put(Code.read);
					} else {
						Code.put(Code.bread);
					}
					Code.store(d);
					parser.report_info("Correct type for read at " + dleft,null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= RETURN Expr SEMIC 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct ex = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				hasReturn = true;
				actRet = ex;
				if(currentMethod.getType().assignableTo(actRet)){
					parser.report_info("Matching return for method "+currentMethod.getName()+" at "+rleft, null);
				} else {
					parser.report_error("Incorrect return for method "+currentMethod.getName()+" at "+rleft, null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= RETURN SEMIC 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				hasReturn = true;
				actRet = Tab.noObj.getType();
				if(currentMethod.getType().assignableTo(actRet)){
					parser.report_info("Matching return for method "+currentMethod.getName()+" at "+rleft, null);
				} else {
					parser.report_error("Incorrect return for method "+currentMethod.getName()+" at "+rleft, null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= BREAK SEMIC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(loopNest > 0) parser.report_info("Break instruction encountered at "+bleft+" Nesting lvl("+loopNest+")", null);
				else parser.report_error("Encountered break instruction out of loop at "+bleft, null);
			
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= While LEFT_BRACKET CondEvaluated RIGHT_BRACKET Matched 
            {
              Object RESULT =null;
		
				loopNest--;
				Code.putJump(WhileStruct.getCurrentTop().getTopAdr());
				Code.fixup(WhileStruct.getCurrentTop().getEndJumpInstrAdr()+1);
				WhileStruct.exitWhile();
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= IF LEFT_BRACKET Condition RIGHT_BRACKET Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= Designator DesignatorModifiers SEMIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= Designator NT$10 Assign SEMIC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
if(type.assignableTo(des.getType()) || (this.parser.arrayStore && type.assignableTo(des.getType().getElemType()))){
	if(this.parser.asstype == 1){
		Code.load(des);
	
		Obj c = Tab.insert(Obj.Con, "", Tab.intType);
		c.setAdr(1);
		Code.load(c);
		Code.put(Code.add);
	}
	if(this.parser.asstype == 2) {
		Code.load(des);
	
		Obj c = Tab.insert(Obj.Con, "", Tab.intType);
		c.setAdr(1);
		Code.load(c);
		Code.put(Code.sub);
	}
	if(this.parser.arrayStore && !this.parser.allocArray){
		Obj o = new Obj(Obj.Elem, "", des.getType().getElemType());
		Code.store(o);
	}
	boolean storesize = false;
	if(this.parser.allocArray){
		this.parser.allocArray = false;
		storesize = true;
		
		Code.put(Code.newarray);
		Code.put(1);

	}
	
	if(this.parser.arrayStore){
		this.parser.arrayStore = false;
	} else
	Code.store(des);
	
	
	parser.report_info("Correct assignment at "+desleft,null);
	

} else {
	parser.report_error("Unable to assign type "+type.getKind()+" to "+des.getName()+" of type "+des.getType().getKind()+" at "+desleft,null); 
}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$10 ::= 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

	if(this.parser.arrayAccess){
		this.parser.arrayStore = true;
		this.parser.arrayAccess = false;
	}
	if(des.getKind() == Obj.Con){
		this.parser.report_error("Error: Cannot assign value to a constant at "+desleft, null);
	}
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Unmatched ::= While LEFT_BRACKET CondEvaluated RIGHT_BRACKET Unmatched 
            {
              Object RESULT =null;
		
				loopNest--;
				Code.putJump(WhileStruct.getCurrentTop().getTopAdr());
				Code.fixup(WhileStruct.getCurrentTop().getEndJumpInstrAdr()+1);
				WhileStruct.exitWhile();
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Unmatched ::= IF LEFT_BRACKET Condition RIGHT_BRACKET Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Unmatched ::= IF LEFT_BRACKET Condition RIGHT_BRACKET Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormParsDecl ::= Type IDENT Array 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj type = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int formparNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int formparNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String formparName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	this.parser.formParsCount++;
	Obj p = Tab.find(formparName);
	if(p == Tab.noObj){
		Obj newObj = Tab.insert(Obj.Var, formparName, type.getType());
		newObj.setFpPos(fpPos++);
	}


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormParsList ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormParsList ::= FormParsDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormParsList ::= FormParsList COMMA error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormParsList ::= FormParsList COMMA FormParsDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormPars ::= FormParsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Return ::= Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = t.getType();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Return ::= VOID 
            {
              Struct RESULT =null;
		
  RESULT = 	Tab.noObj.getType();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodVarDeclAdditional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclAdditional",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodVarDeclAdditional ::= MethodVarDeclAdditional VarDecl COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclAdditional",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodVarDeclList ::= MethodVarDeclList Type MethodVarDeclAdditional VarDecl SEMIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodVarDeclList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // GlobalMethodDecl ::= Return IDENT NT$8 LEFT_BRACKET FormPars RIGHT_BRACKET MethodVarDeclList NT$9 LEFT_CBRACKET StatementList RIGHT_CBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		
		if(!actRet.assignableTo(retType)) parser.report_error("Return types do not match in method: " + methName + " at " +methNameleft,null);
		else {parser.report_info("Method "+methName+" was either void or returned correct type.", null); }
		
		Code.put(Code.exit);
		Code.put(Code.return_);
		
		actRet = Tab.noObj.getType();
		this.parser.incrementMethodCount();
		this.parser.switchVarMode(MJParser.VarCountMode.NONE);
		Tab.chainLocalSymbols(Tab.find(methName));
		Tab.closeScope();
		hasReturn = false;
		currentMethod = null;
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalMethodDecl",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

		currentMethod.setAdr(Code.pc);
		if(methName.equals("main")){
			this.parser.switchVarMode(MJParser.VarCountMode.MAIN);
			mainFound = true;
			Code.mainPc = currentMethod.getAdr();
		}
		currentMethod.setLevel(fpPos);
		Code.put(Code.enter);
		Code.put(currentMethod.getLevel());
		Code.put(Tab.currentScope().getnVars());
		
		fpPos = 0;
		
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$8 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

		Obj p = Tab.find(methName);
		if( p == Tab.noObj ){
			Tab.openScope();
			parser.report_info("Global method " + methName + " declared at "+ methNameleft, null);
			currentMethod = Tab.insert(Obj.Meth, methName, retType);
		} else {
			parser.report_error("Method name in use " + methName + " at "+methNameleft, null);
		}
	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // GlobalMethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalMethodDeclList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // GlobalMethodDeclList ::= GlobalMethodDeclList GlobalMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalMethodDeclList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDecl ::= Return IDENT LEFT_BRACKET FormPars RIGHT_BRACKET MethodVarDeclList NT$7 LEFT_CBRACKET StatementList RIGHT_CBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		
	if(!retType.equals(actRet)) parser.report_error("Return types do not match in method: " + methName + " at " +methNameleft,null);
	if(retType.equals(Tab.noObj.getType()) && !hasReturn) parser.report_error("No return for function "+methName+" at "+methNameleft,null);
	actRet = Tab.noObj.getType(); 
	this.parser.incrementMethodCount();
	Tab.chainLocalSymbols(Tab.find(methName));
	Tab.closeScope();
	
	hasReturn = false;
	currentMethod = null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
	
	Obj p = Tab.find(methName);
	if ( p == Tab.noObj ){
		parser.report_info("Method " + methName + " declared at " + methNameleft, null);
		currentMethod = Tab.insert(Obj.Meth, methName, retType);
		currentMethod.setAdr(Code.pc);
		
		Tab.openScope();
		fpPos = 0;
	}
	else
		parser.report_error("Method name in use " + methName + " at "+methNameleft, null);

	currentMethod.setLevel(fpPos);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj typeNode = Tab.find(typeName);
	if ( typeNode == Tab.noObj) {
		parser.report_error("Undefined type - " + typeName, null);
		RESULT = Tab.noObj;
	} else {
		if ( Obj.Type == typeNode.getKind() ) {
			RESULT = typeNode;
			curType = typeNode.getType();
		} else {
			parser.report_error(typeName + " - is not a type name at " + typeNameleft, null);
			RESULT = Tab.noObj;
		}
	}
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Extends ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Extends ::= EXTENDS error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Extends ::= EXTENDS Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	boolean validType = false;
	if(t.getType().getKind() == Struct.Class)
		parser.report_info("Extends valid type "+t.getName(),null);
	else
		parser.report_info("Extends invalid type "+t.getName(),null);
		

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Extends",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassDecl ::= CLASS IDENT NT$3 Extends LEFT_CBRACKET NT$4 VarDeclList NT$5 LEFT_CBRACKET NT$6 MethodDeclList RIGHT_CBRACKET RIGHT_CBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		
	this.parser.switchMethodMode(MJParser.MethodCountMode.NONE);
	this.parser.classCount++;
	Tab.chainLocalSymbols(Tab.find(className).getType());
	Tab.closeScope();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

	this.parser.switchMethodMode(MJParser.MethodCountMode.CLASS);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

	this.parser.switchVarMode(MJParser.VarCountMode.NONE);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

	this.parser.switchVarMode(MJParser.VarCountMode.CLASS);
	Tab.openScope();
	Tab.insert(Obj.Var, "this", new Struct(Struct.Class));

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
	
	Obj p = Tab.find(className);
	if ( p == Tab.noObj ){
		parser.report_info("Class " + className + " declared at " + classNameleft, null);
		Tab.insert(Obj.Type, className, new Struct(Struct.Class));
	}
	else
		parser.report_error("Class variable name in use " + className + " at "+classNameleft, null);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Value ::= STRING 
            {
              Obj RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			RESULT = null; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Value ::= BOOL 
            {
              Obj RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		boolean v = (boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT  = new Obj(Obj.Con, "", Tab.find("boolean").getType(), v ? 1:0, 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Value ::= CHAR 
            {
              Obj RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		char v = (char)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Obj(Obj.Con, "", Tab.find("char").getType(), v, 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Value ::= NUM 
            {
              Obj RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Obj(Obj.Con, "", Tab.find("int").getType(), v, 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= IDENT ASSIGNMENT Value 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj v = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	if(curType.assignableTo(v.getType())){
		this.parser.constCount++;
		parser.report_info("Constant " + constName + " declared at " + constNameleft, null);
		Obj p = Tab.find(constName);
		if (p == Tab.noObj){
		
			Obj constVar = Tab.insert(Obj.Con, constName, curType);
			constVar.setAdr(v.getAdr());
		}
		else
			parser.report_error("Const variable name in use " + constName + " at "+constNameleft, null);
	} else {
		parser.report_error("Non-matching types at "+constNameleft, null);
	}


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstDeclAdditional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclAdditional",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDeclAdditional ::= ConstDeclAdditional Const COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclAdditional",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDeclList2 ::= ConstDeclAdditional Const 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList2",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDeclList ::= CONST Type ConstDeclList2 SEMIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Array ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Array",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Array ::= LEFT_SBRACKET RIGHT_SBRACKET 
            {
              Object RESULT =null;
		 this.parser.incrementCount(MJParser.VarCountType.ARRAY); isArray = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Array",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= error 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= IDENT Array 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
	Obj p = Tab.find(varName);
	if ( p == Tab.noObj ) {
		parser.report_info("Variable " + varName + " declared at "+ varNameleft, null);
		this.parser.incrementCount(MJParser.VarCountType.VAR);
		
		if(isArray){
			Struct arrStruct = new Struct(Struct.Array);
			arrStruct.setElementType(curType);
			Tab.insert(Obj.Var, varName, arrStruct);
		}
		else
			Tab.insert(Obj.Var, varName, curType);
	} else {
		parser.report_error("Variable name in use " + varName + " at "+varNameleft, null);
	}
	isArray = false;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDeclAdditional ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclAdditional",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDeclAdditional ::= VarDeclAdditional VarDecl COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclAdditional",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDeclList2 ::= VarDeclAdditional VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList2",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDeclList ::= Type VarDeclList2 SEMIC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclList ::= DeclList ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= DeclList ConstDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= DeclList NT$2 VarDeclList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 this.parser.switchVarMode(MJParser.VarCountMode.NONE); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
 this.parser.switchVarMode(MJParser.VarCountMode.GLOBAL); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	Tab.openScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM ProgName DeclList LEFT_CBRACKET NT$0 GlobalMethodDeclList NT$1 RIGHT_CBRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		
	Code.dataSize = Tab.currentScope().getnVars();
	Tab.chainLocalSymbols(p);
	Tab.closeScope();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 this.parser.switchMethodMode(MJParser.MethodCountMode.NONE); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
 this.parser.switchMethodMode(MJParser.MethodCountMode.GLOBAL); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

